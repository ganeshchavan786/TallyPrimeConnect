; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
; -- TallyPrimeConnect_setup.iss --

#define MyAppName "TallyPrime Connect App"
#define MyAppVersion "1.1.0" // <-- !! UPDATE Your App Version !!
#efine MyAppPublisher "Your Company Name" // <-- !! UPDATE Publisher !!
#define MyAppURL "https://yourwebsite.com" // <-- !! UPDATE URL (Optional) !!
#define MyAppExeName "TallyPrimeConnectApp.exe" // <-- Name from PyInstaller
#define SourceDir "dist\TallyPrimeConnectApp"   // <-- Path to PyInstaller output folder (relative to this .iss file)
#define MyAppIcon "assets\logo.ico"            // <-- Path to your app icon (relative to this .iss file)
#define LicenseFileName "LICENSE.txt"         // <-- !! CREATE and specify your License File (Optional) !!

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same
; AppId value in installers for other applications. Required for robust uninstall.
; Generate a new GUID (https://www.guidgenerator.com/) for your specific app.
AppId={{F5A8C7D4-9E1F-4B3A-8C8A-7E9D1A3B5C7D} ; <-- !! GENERATE a new GUID !!
AppName={MyAppName}
AppVersion={MyAppVersion}
AppPublisher={MyAppPublisher}
AppPublisherURL={MyAppURL}
AppSupportURL={MyAppURL}
AppUpdatesURL={MyAppURL}
DefaultDirName={autopf}\{MyAppName} ; Install in Program Files
DefaultGroupName={MyAppName} ; Start Menu folder name
DisableProgramGroupPage=yes ; Simpler install without asking for Start Menu folder name
AllowNoIcons=yes ; Allow user to deselect shortcut creation
LicenseFile={LicenseFileName} ; Optional: Specify your license file (TXT or RTF)
OutputBaseFilename=TallyPrimeConnectApp-{MyAppVersion}-setup ; Name of the output setup file
Compression=lzma
SolidCompression=yes
WizardStyle=modern
PrivilegesRequired=admin ; Required to write to Program Files, create standard shortcuts/uninstaller
ArchitecturesInstallIn64BitMode=x64 ; Assume 64-bit install, change if bundling 32-bit Python
SetupIconFile={MyAppIcon}
UninstallDisplayIcon={app}\{MyAppExeName}
UninstallDisplayName={MyAppName}
; --- Code Signing (Optional but Recommended) ---
; SignTool=YourSignToolPath /f "path\to\your\certificate.pfx" /p YourPassword /t http://timestamp.comodoca.com/authenticode
; SignedUninstaller=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
; Let user choose whether to create shortcuts
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1 ; Quick Launch deprecated after Win7

[Files]
; Copy the entire output directory from PyInstaller
Source: "{SourceDir}\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't include log files or generated databases in SourceDir unless intended.
; The application itself should create these inside {app}\config or {userappdata}\YourAppName\config

[Icons]
; Start Menu Icon
Name: "{group}\{MyAppName}"; Filename: "{app}\{MyAppExeName}"; IconFilename: "{app}\{MyAppIcon}"
; Optional Desktop Icon (based on Task selection)
Name: "{commondesktop}\{MyAppName}"; Filename: "{app}\{MyAppExeName}"; Tasks: desktopicon; IconFilename: "{app}\{MyAppIcon}"
; Optional Quick Launch Icon (based on Task selection)
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{MyAppName}"; Filename: "{app}\{MyAppExeName}"; Tasks: quicklaunchicon; IconFilename: "{app}\{MyAppIcon}"
; Uninstaller Shortcut in Start Menu
Name: "{group}\{cm:UninstallProgram,{MyAppName}}"; Filename: "{uninstallexe}"; IconFilename: "{app}\{MyAppIcon}"

[Run]
; Optionally launch the application after installation finishes
Filename: "{app}\{MyAppExeName}"; Description: "{cm:LaunchProgram,{StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent unchecked

[UninstallDelete]
; Clean up registry entries and files/folders during uninstall
Type: filesandordirs; Name: "{app}" ; Remove the entire application directory

[Registry]
; Optional: Add registry keys if your application needs them.
; Example: Store install path (often useful)
; Root: HKLM; Subkey: "Software\YourCompany\{#MyAppName}"; ValueType: string; ValueName: "InstallPath"; ValueData: "{app}"; Flags: uninsdeletekeyifempty
; Root: HKLM; Subkey: "Software\Microsoft\Windows\CurrentVersion\Uninstall\{#AppId}_is1"; ValueType: string; ValueName: "InstallLocation"; ValueData: "{app}"; Flags: uninsdeletevalue

; --- Custom Code for Pre-Checks ---
[Code]
// Function to check minimum RAM (example: 1GB = 1024 MB)
function CheckMemory(MinMB: Integer): Boolean;
var
  MemInfo: TMemoryStatus;
begin
  MemInfo.dwLength := SizeOf(MemInfo);
  GlobalMemoryStatus(MemInfo);
  // MemInfo.ullTotalPhys gives bytes, convert to MB
  Result := (MemInfo.ullTotalPhys div 1024 div 1024) >= MinMB;
  if not Result then
    MsgBox(Format('This program requires at least %d MB of RAM. Your system has %d MB.', [MinMB, MemInfo.ullTotalPhys div 1024 div 1024]), mbError, MB_OK);
end;

// Function to check minimum disk space on the target drive
function CheckDiskSpace(MinMB: Integer): Boolean;
var
  FreeBytes, TotalBytes, TotalFreeBytes: Int64;
  Drive: String;
begin
  // Get drive from the selected installation path ({app})
  Drive := ExpandConstant('{drive:{app}}');
  if GetDiskFreeSpaceEx(Drive, FreeBytes, TotalBytes, TotalFreeBytes) then
  begin
    // Check free space in MB
    Result := (FreeBytes div 1024 div 1024) >= MinMB;
    if not Result then
      MsgBox(Format('Setup requires at least %d MB of free space on drive %s. You have %d MB available.', [MinMB, Drive, FreeBytes div 1024 div 1024]), mbError, MB_OK);
  end else begin
    // Could not get disk space (e.g., network drive) - proceed cautiously or fail
    Log(Format('Could not check disk space on drive %s.', [Drive]));
    Result := True; // Or set to False to block install if space check is critical
  end;
end;

// --- Main Initialization Function ---
function InitializeSetup(): Boolean;
begin
  // --- Pre-Checks ---
  // Check OS Version (Windows 7 = 6.1) - Inno Setup handles MinVersion directive better now
  // if GetWindowsVersion < $06010000 then // Check if below Windows 7
  // begin
  //   MsgBox('This program requires Windows 7 or later.', mbError, MB_OK);
  //   Result := False;
  //   Exit; // Stop setup
  // end;

  // Check Minimum RAM (e.g., 2048 MB = 2 GB)
  if not CheckMemory(2048) then // <-- !! ADJUST RAM REQUIREMENT !!
  begin
    Result := False; // Stop setup if RAM check fails
    Exit;
  end;

  // Check Minimum Disk Space (e.g., 500 MB) - Check against expected size of PyInstaller bundle + data
  if not CheckDiskSpace(500) then // <-- !! ADJUST DISK SPACE REQUIREMENT !!
  begin
    Result := False; // Stop setup if disk space check fails
    Exit;
  end;

  // --- Dependency Checks (Example for .NET - adapt if needed) ---
  // if not IsDotNetInstalled(net45, 0) then // Requires Inno Setup Preprocessor (ISPP) or custom DLL usually
  // begin
  //    MsgBox('.NET Framework 4.5 (or higher) is required. Please install it and run setup again.', mbError, MB_OK);
  //    Result := False;
  //    Exit;
  // end;

  // If all checks pass
  Result := True;
end;

// Optional: Code executed right before install starts
// procedure CurStepChanged(CurStep: TSetupStep);
// begin
//   if CurStep = ssInstall then
//   begin
//     Log('Starting installation...');
//   end;
// end;

// Optional: Code executed right after install finishes
// procedure CurStepChanged(CurStep: TSetupStep);
// begin
//  if CurStep = ssPostInstall then
//  begin
//      Log('Installation finished.');
//  end;
// end;